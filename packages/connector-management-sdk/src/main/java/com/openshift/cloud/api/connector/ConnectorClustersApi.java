/*
 * Connector Management API
 * Connector Management API is a REST API to manage connectors.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openshift.cloud.api.connector;

import com.openshift.cloud.api.connector.invoker.ApiClient;
import com.openshift.cloud.api.connector.invoker.ApiException;
import com.openshift.cloud.api.connector.invoker.ApiResponse;
import com.openshift.cloud.api.connector.invoker.Pair;

import com.openshift.cloud.api.connector.models.AddonParameter;
import com.openshift.cloud.api.connector.models.ConnectorCluster;
import com.openshift.cloud.api.connector.models.ConnectorClusterList;
import com.openshift.cloud.api.connector.models.ConnectorClusterRequest;
import com.openshift.cloud.api.connector.models.ConnectorNamespaceList;
import com.openshift.cloud.api.connector.models.Error;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectorClustersApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ConnectorClustersApi() {
    this(new ApiClient());
  }

  public ConnectorClustersApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a new connector cluster
   * Create a new connector cluster
   * @param async Perform the action in an asynchronous manner (required)
   * @param connectorClusterRequest Connector cluster data (required)
   * @return ConnectorCluster
   * @throws ApiException if fails to make API call
   */
  public ConnectorCluster createConnectorCluster(Boolean async, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    ApiResponse<ConnectorCluster> localVarResponse = createConnectorClusterWithHttpInfo(async, connectorClusterRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a new connector cluster
   * Create a new connector cluster
   * @param async Perform the action in an asynchronous manner (required)
   * @param connectorClusterRequest Connector cluster data (required)
   * @return ApiResponse&lt;ConnectorCluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectorCluster> createConnectorClusterWithHttpInfo(Boolean async, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createConnectorClusterRequestBuilder(async, connectorClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createConnectorCluster", localVarResponse);
        }
        return new ApiResponse<ConnectorCluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectorCluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createConnectorClusterRequestBuilder(Boolean async, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    // verify the required parameter 'async' is set
    if (async == null) {
      throw new ApiException(400, "Missing the required parameter 'async' when calling createConnectorCluster");
    }
    // verify the required parameter 'connectorClusterRequest' is set
    if (connectorClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterRequest' when calling createConnectorCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("async", async));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectorClusterRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a connector cluster
   * Delete a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @return Error
   * @throws ApiException if fails to make API call
   */
  public Error deleteConnectorCluster(String connectorClusterId) throws ApiException {
    ApiResponse<Error> localVarResponse = deleteConnectorClusterWithHttpInfo(connectorClusterId);
    return localVarResponse.getData();
  }

  /**
   * Delete a connector cluster
   * Delete a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @return ApiResponse&lt;Error&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Error> deleteConnectorClusterWithHttpInfo(String connectorClusterId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteConnectorClusterRequestBuilder(connectorClusterId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteConnectorCluster", localVarResponse);
        }
        return new ApiResponse<Error>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Error>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteConnectorClusterRequestBuilder(String connectorClusterId) throws ApiException {
    // verify the required parameter 'connectorClusterId' is set
    if (connectorClusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterId' when calling deleteConnectorCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
        .replace("{connector_cluster_id}", ApiClient.urlEncode(connectorClusterId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a connector cluster
   * Get a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @return ConnectorCluster
   * @throws ApiException if fails to make API call
   */
  public ConnectorCluster getConnectorCluster(String connectorClusterId) throws ApiException {
    ApiResponse<ConnectorCluster> localVarResponse = getConnectorClusterWithHttpInfo(connectorClusterId);
    return localVarResponse.getData();
  }

  /**
   * Get a connector cluster
   * Get a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @return ApiResponse&lt;ConnectorCluster&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectorCluster> getConnectorClusterWithHttpInfo(String connectorClusterId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectorClusterRequestBuilder(connectorClusterId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectorCluster", localVarResponse);
        }
        return new ApiResponse<ConnectorCluster>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectorCluster>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectorClusterRequestBuilder(String connectorClusterId) throws ApiException {
    // verify the required parameter 'connectorClusterId' is set
    if (connectorClusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterId' when calling getConnectorCluster");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
        .replace("{connector_cluster_id}", ApiClient.urlEncode(connectorClusterId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a connector cluster&#39;s addon parameters
   * Get a connector cluster&#39;s addon parameters
   * @param connectorClusterId The id of the connector cluster (required)
   * @param resetCredentials Resets cluster service account credentials when true (optional)
   * @return List&lt;AddonParameter&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AddonParameter> getConnectorClusterAddonParameters(String connectorClusterId, Boolean resetCredentials) throws ApiException {
    ApiResponse<List<AddonParameter>> localVarResponse = getConnectorClusterAddonParametersWithHttpInfo(connectorClusterId, resetCredentials);
    return localVarResponse.getData();
  }

  /**
   * Get a connector cluster&#39;s addon parameters
   * Get a connector cluster&#39;s addon parameters
   * @param connectorClusterId The id of the connector cluster (required)
   * @param resetCredentials Resets cluster service account credentials when true (optional)
   * @return ApiResponse&lt;List&lt;AddonParameter&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<AddonParameter>> getConnectorClusterAddonParametersWithHttpInfo(String connectorClusterId, Boolean resetCredentials) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectorClusterAddonParametersRequestBuilder(connectorClusterId, resetCredentials);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectorClusterAddonParameters", localVarResponse);
        }
        return new ApiResponse<List<AddonParameter>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AddonParameter>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectorClusterAddonParametersRequestBuilder(String connectorClusterId, Boolean resetCredentials) throws ApiException {
    // verify the required parameter 'connectorClusterId' is set
    if (connectorClusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterId' when calling getConnectorClusterAddonParameters");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters"
        .replace("{connector_cluster_id}", ApiClient.urlEncode(connectorClusterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("reset_credentials", resetCredentials));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a connector cluster&#39;s namespaces
   * Get a connector cluster&#39;s namespaces
   * @param connectorClusterId The id of the connector cluster (required)
   * @param page Page index (optional)
   * @param size Number of items in each page (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;ConnectorType&#x60; fields. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
   * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement. Allowed fields in the search are &#x60;name&#x60;, &#x60;description&#x60;, &#x60;version&#x60;, &#x60;label&#x60;, and &#x60;channel&#x60;. Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Connector Type that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
   * @return ConnectorNamespaceList
   * @throws ApiException if fails to make API call
   */
  public ConnectorNamespaceList getConnectorClusterNamespaces(String connectorClusterId, String page, String size, String orderBy, String search) throws ApiException {
    ApiResponse<ConnectorNamespaceList> localVarResponse = getConnectorClusterNamespacesWithHttpInfo(connectorClusterId, page, size, orderBy, search);
    return localVarResponse.getData();
  }

  /**
   * Get a connector cluster&#39;s namespaces
   * Get a connector cluster&#39;s namespaces
   * @param connectorClusterId The id of the connector cluster (required)
   * @param page Page index (optional)
   * @param size Number of items in each page (optional)
   * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;ConnectorType&#x60; fields. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
   * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement. Allowed fields in the search are &#x60;name&#x60;, &#x60;description&#x60;, &#x60;version&#x60;, &#x60;label&#x60;, and &#x60;channel&#x60;. Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;[p-]  To return a Kafka instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Connector Type that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
   * @return ApiResponse&lt;ConnectorNamespaceList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectorNamespaceList> getConnectorClusterNamespacesWithHttpInfo(String connectorClusterId, String page, String size, String orderBy, String search) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getConnectorClusterNamespacesRequestBuilder(connectorClusterId, page, size, orderBy, search);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getConnectorClusterNamespaces", localVarResponse);
        }
        return new ApiResponse<ConnectorNamespaceList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectorNamespaceList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getConnectorClusterNamespacesRequestBuilder(String connectorClusterId, String page, String size, String orderBy, String search) throws ApiException {
    // verify the required parameter 'connectorClusterId' is set
    if (connectorClusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterId' when calling getConnectorClusterNamespaces");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/namespaces"
        .replace("{connector_cluster_id}", ApiClient.urlEncode(connectorClusterId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search", search));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of connector clusters
   * Returns a list of connector clusters
   * @param page Page index (optional)
   * @param size Number of items in each page (optional)
   * @return ConnectorClusterList
   * @throws ApiException if fails to make API call
   */
  public ConnectorClusterList listConnectorClusters(String page, String size) throws ApiException {
    ApiResponse<ConnectorClusterList> localVarResponse = listConnectorClustersWithHttpInfo(page, size);
    return localVarResponse.getData();
  }

  /**
   * Returns a list of connector clusters
   * Returns a list of connector clusters
   * @param page Page index (optional)
   * @param size Number of items in each page (optional)
   * @return ApiResponse&lt;ConnectorClusterList&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ConnectorClusterList> listConnectorClustersWithHttpInfo(String page, String size) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listConnectorClustersRequestBuilder(page, size);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listConnectorClusters", localVarResponse);
        }
        return new ApiResponse<ConnectorClusterList>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ConnectorClusterList>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listConnectorClustersRequestBuilder(String page, String size) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * udpate a connector cluster
   * udpate a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @param connectorClusterRequest Data to updated connector with (required)
   * @throws ApiException if fails to make API call
   */
  public void updateConnectorClusterById(String connectorClusterId, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    updateConnectorClusterByIdWithHttpInfo(connectorClusterId, connectorClusterRequest);
  }

  /**
   * udpate a connector cluster
   * udpate a connector cluster
   * @param connectorClusterId The id of the connector cluster (required)
   * @param connectorClusterRequest Data to updated connector with (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateConnectorClusterByIdWithHttpInfo(String connectorClusterId, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateConnectorClusterByIdRequestBuilder(connectorClusterId, connectorClusterRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateConnectorClusterById", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateConnectorClusterByIdRequestBuilder(String connectorClusterId, ConnectorClusterRequest connectorClusterRequest) throws ApiException {
    // verify the required parameter 'connectorClusterId' is set
    if (connectorClusterId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterId' when calling updateConnectorClusterById");
    }
    // verify the required parameter 'connectorClusterRequest' is set
    if (connectorClusterRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorClusterRequest' when calling updateConnectorClusterById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
        .replace("{connector_cluster_id}", ApiClient.urlEncode(connectorClusterId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(connectorClusterRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
