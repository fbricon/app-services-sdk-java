/*
 * Service Accounts API Documentation
 * This is the API documentation for Service Accounts
 *
 * The version of the OpenAPI document: 5.0.19
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openshift.cloud.api.serviceaccounts;

import com.openshift.cloud.api.serviceaccounts.invoker.ApiClient;
import com.openshift.cloud.api.serviceaccounts.invoker.ApiException;
import com.openshift.cloud.api.serviceaccounts.invoker.ApiResponse;
import com.openshift.cloud.api.serviceaccounts.invoker.Pair;

import com.openshift.cloud.api.serviceaccounts.models.Error;
import com.openshift.cloud.api.serviceaccounts.models.RedHatErrorRepresentation;
import com.openshift.cloud.api.serviceaccounts.models.ServiceAccountCreateRequestData;
import com.openshift.cloud.api.serviceaccounts.models.ServiceAccountData;
import com.openshift.cloud.api.serviceaccounts.models.ServiceAccountRequestData;
import java.util.Set;
import com.openshift.cloud.api.serviceaccounts.models.ValidationExceptionData;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServiceAccountsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ServiceAccountsApi() {
    this(new ApiClient());
  }

  public ServiceAccountsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create service account
   * Create a service account. Created service account is associated with the user defined in the bearer token.
   * @param serviceAccountCreateRequestData &#39;name&#39; and &#39;description&#39; of the service account (required)
   * @return ServiceAccountData
   * @throws ApiException if fails to make API call
   */
  public ServiceAccountData createServiceAccount(ServiceAccountCreateRequestData serviceAccountCreateRequestData) throws ApiException {
    ApiResponse<ServiceAccountData> localVarResponse = createServiceAccountWithHttpInfo(serviceAccountCreateRequestData);
    return localVarResponse.getData();
  }

  /**
   * Create service account
   * Create a service account. Created service account is associated with the user defined in the bearer token.
   * @param serviceAccountCreateRequestData &#39;name&#39; and &#39;description&#39; of the service account (required)
   * @return ApiResponse&lt;ServiceAccountData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceAccountData> createServiceAccountWithHttpInfo(ServiceAccountCreateRequestData serviceAccountCreateRequestData) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createServiceAccountRequestBuilder(serviceAccountCreateRequestData);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createServiceAccount", localVarResponse);
        }
        return new ApiResponse<ServiceAccountData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceAccountData>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createServiceAccountRequestBuilder(ServiceAccountCreateRequestData serviceAccountCreateRequestData) throws ApiException {
    // verify the required parameter 'serviceAccountCreateRequestData' is set
    if (serviceAccountCreateRequestData == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceAccountCreateRequestData' when calling createServiceAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(serviceAccountCreateRequestData);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete service account by id
   * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteServiceAccount(String id) throws ApiException {
    deleteServiceAccountWithHttpInfo(id);
  }

  /**
   * Delete service account by id
   * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteServiceAccountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteServiceAccountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteServiceAccount", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteServiceAccountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteServiceAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get service account by id
   * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @return ServiceAccountData
   * @throws ApiException if fails to make API call
   */
  public ServiceAccountData getServiceAccount(String id) throws ApiException {
    ApiResponse<ServiceAccountData> localVarResponse = getServiceAccountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get service account by id
   * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @return ApiResponse&lt;ServiceAccountData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceAccountData> getServiceAccountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getServiceAccountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getServiceAccount", localVarResponse);
        }
        return new ApiResponse<ServiceAccountData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceAccountData>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getServiceAccountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getServiceAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List all service accounts
   * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as &#39;first&#39; and page size as &#39;max&#39;.
   * @param first  (optional, default to 0)
   * @param max  (optional, default to 20)
   * @param clientId  (optional
   * @return List&lt;ServiceAccountData&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ServiceAccountData> getServiceAccounts(Integer first, Integer max, Set<String> clientId) throws ApiException {
    ApiResponse<List<ServiceAccountData>> localVarResponse = getServiceAccountsWithHttpInfo(first, max, clientId);
    return localVarResponse.getData();
  }

  /**
   * List all service accounts
   * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as &#39;first&#39; and page size as &#39;max&#39;.
   * @param first  (optional, default to 0)
   * @param max  (optional, default to 20)
   * @param clientId  (optional
   * @return ApiResponse&lt;List&lt;ServiceAccountData&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ServiceAccountData>> getServiceAccountsWithHttpInfo(Integer first, Integer max, Set<String> clientId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getServiceAccountsRequestBuilder(first, max, clientId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getServiceAccounts", localVarResponse);
        }
        return new ApiResponse<List<ServiceAccountData>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ServiceAccountData>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getServiceAccountsRequestBuilder(Integer first, Integer max, Set<String> clientId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("first", first));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max", max));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "clientId", clientId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Reset service account secret by id
   * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @return ServiceAccountData
   * @throws ApiException if fails to make API call
   */
  public ServiceAccountData resetServiceAccountSecret(String id) throws ApiException {
    ApiResponse<ServiceAccountData> localVarResponse = resetServiceAccountSecretWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Reset service account secret by id
   * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
   * @param id  (required)
   * @return ApiResponse&lt;ServiceAccountData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceAccountData> resetServiceAccountSecretWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = resetServiceAccountSecretRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("resetServiceAccountSecret", localVarResponse);
        }
        return new ApiResponse<ServiceAccountData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceAccountData>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder resetServiceAccountSecretRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling resetServiceAccountSecret");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1/{id}/resetSecret"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update service account
   * Update a service account by id.
   * @param id  (required)
   * @param serviceAccountRequestData &#39;name&#39; and &#39;description&#39; of the service account (required)
   * @return ServiceAccountData
   * @throws ApiException if fails to make API call
   */
  public ServiceAccountData updateServiceAccount(String id, ServiceAccountRequestData serviceAccountRequestData) throws ApiException {
    ApiResponse<ServiceAccountData> localVarResponse = updateServiceAccountWithHttpInfo(id, serviceAccountRequestData);
    return localVarResponse.getData();
  }

  /**
   * Update service account
   * Update a service account by id.
   * @param id  (required)
   * @param serviceAccountRequestData &#39;name&#39; and &#39;description&#39; of the service account (required)
   * @return ApiResponse&lt;ServiceAccountData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServiceAccountData> updateServiceAccountWithHttpInfo(String id, ServiceAccountRequestData serviceAccountRequestData) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateServiceAccountRequestBuilder(id, serviceAccountRequestData);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateServiceAccount", localVarResponse);
        }
        return new ApiResponse<ServiceAccountData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServiceAccountData>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateServiceAccountRequestBuilder(String id, ServiceAccountRequestData serviceAccountRequestData) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateServiceAccount");
    }
    // verify the required parameter 'serviceAccountRequestData' is set
    if (serviceAccountRequestData == null) {
      throw new ApiException(400, "Missing the required parameter 'serviceAccountRequestData' when calling updateServiceAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/apis/service_accounts/v1/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(serviceAccountRequestData);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
