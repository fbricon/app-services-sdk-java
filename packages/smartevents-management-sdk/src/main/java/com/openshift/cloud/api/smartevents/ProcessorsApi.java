/*
 * Red Hat Openshift SmartEvents Fleet Manager
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openshift.cloud.api.smartevents;

import com.openshift.cloud.api.smartevents.invoker.ApiClient;
import com.openshift.cloud.api.smartevents.invoker.ApiException;
import com.openshift.cloud.api.smartevents.invoker.ApiResponse;
import com.openshift.cloud.api.smartevents.invoker.Pair;

import com.openshift.cloud.api.smartevents.models.ManagedResourceStatus;
import com.openshift.cloud.api.smartevents.models.ProcessorListResponse;
import com.openshift.cloud.api.smartevents.models.ProcessorRequest;
import com.openshift.cloud.api.smartevents.models.ProcessorResponse;
import com.openshift.cloud.api.smartevents.models.ProcessorType;
import java.util.Set;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProcessorsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ProcessorsApi() {
    this(new ApiClient());
  }

  public ProcessorsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a Processor of a Bridge instance
   * Create a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorRequest  (optional)
   * @return CompletableFuture&lt;ProcessorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ProcessorResponse> processorsAPIAddProcessorToBridge(String bridgeId, ProcessorRequest processorRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIAddProcessorToBridgeRequestBuilder(bridgeId, processorRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIAddProcessorToBridge", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a Processor of a Bridge instance
   * Create a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorRequest  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ProcessorResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ProcessorResponse>> processorsAPIAddProcessorToBridgeWithHttpInfo(String bridgeId, ProcessorRequest processorRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIAddProcessorToBridgeRequestBuilder(bridgeId, processorRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIAddProcessorToBridge", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ProcessorResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder processorsAPIAddProcessorToBridgeRequestBuilder(String bridgeId, ProcessorRequest processorRequest) throws ApiException {
    // verify the required parameter 'bridgeId' is set
    if (bridgeId == null) {
      throw new ApiException(400, "Missing the required parameter 'bridgeId' when calling processorsAPIAddProcessorToBridge");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/bridges/{bridgeId}/processors"
        .replace("{bridgeId}", ApiClient.urlEncode(bridgeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(processorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete a Processor of a Bridge instance
   * Delete a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> processorsAPIDeleteProcessor(String bridgeId, String processorId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIDeleteProcessorRequestBuilder(bridgeId, processorId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIDeleteProcessor", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete a Processor of a Bridge instance
   * Delete a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> processorsAPIDeleteProcessorWithHttpInfo(String bridgeId, String processorId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIDeleteProcessorRequestBuilder(bridgeId, processorId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIDeleteProcessor", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder processorsAPIDeleteProcessorRequestBuilder(String bridgeId, String processorId) throws ApiException {
    // verify the required parameter 'bridgeId' is set
    if (bridgeId == null) {
      throw new ApiException(400, "Missing the required parameter 'bridgeId' when calling processorsAPIDeleteProcessor");
    }
    // verify the required parameter 'processorId' is set
    if (processorId == null) {
      throw new ApiException(400, "Missing the required parameter 'processorId' when calling processorsAPIDeleteProcessor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/bridges/{bridgeId}/processors/{processorId}"
        .replace("{bridgeId}", ApiClient.urlEncode(bridgeId.toString()))
        .replace("{processorId}", ApiClient.urlEncode(processorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get a Processor of a Bridge instance
   * Get a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @return CompletableFuture&lt;ProcessorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ProcessorResponse> processorsAPIGetProcessor(String bridgeId, String processorId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIGetProcessorRequestBuilder(bridgeId, processorId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIGetProcessor", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get a Processor of a Bridge instance
   * Get a Processor of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;ProcessorResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ProcessorResponse>> processorsAPIGetProcessorWithHttpInfo(String bridgeId, String processorId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIGetProcessorRequestBuilder(bridgeId, processorId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIGetProcessor", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ProcessorResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder processorsAPIGetProcessorRequestBuilder(String bridgeId, String processorId) throws ApiException {
    // verify the required parameter 'bridgeId' is set
    if (bridgeId == null) {
      throw new ApiException(400, "Missing the required parameter 'bridgeId' when calling processorsAPIGetProcessor");
    }
    // verify the required parameter 'processorId' is set
    if (processorId == null) {
      throw new ApiException(400, "Missing the required parameter 'processorId' when calling processorsAPIGetProcessor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/bridges/{bridgeId}/processors/{processorId}"
        .replace("{bridgeId}", ApiClient.urlEncode(bridgeId.toString()))
        .replace("{processorId}", ApiClient.urlEncode(processorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the list of Processors of a Bridge instance
   * Get the list of Processors of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param name  (optional)
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @param status  (optional
   * @param type  (optional)
   * @return CompletableFuture&lt;ProcessorListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ProcessorListResponse> processorsAPIListProcessors(String bridgeId, String name, Integer page, Integer size, Set<ManagedResourceStatus> status, ProcessorType type) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIListProcessorsRequestBuilder(bridgeId, name, page, size, status, type);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIListProcessors", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorListResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get the list of Processors of a Bridge instance
   * Get the list of Processors of a Bridge instance for the authenticated user.
   * @param bridgeId  (required)
   * @param name  (optional)
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @param status  (optional
   * @param type  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ProcessorListResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ProcessorListResponse>> processorsAPIListProcessorsWithHttpInfo(String bridgeId, String name, Integer page, Integer size, Set<ManagedResourceStatus> status, ProcessorType type) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIListProcessorsRequestBuilder(bridgeId, name, page, size, status, type);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIListProcessors", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ProcessorListResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorListResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder processorsAPIListProcessorsRequestBuilder(String bridgeId, String name, Integer page, Integer size, Set<ManagedResourceStatus> status, ProcessorType type) throws ApiException {
    // verify the required parameter 'bridgeId' is set
    if (bridgeId == null) {
      throw new ApiException(400, "Missing the required parameter 'bridgeId' when calling processorsAPIListProcessors");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/bridges/{bridgeId}/processors"
        .replace("{bridgeId}", ApiClient.urlEncode(bridgeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a Processor instance Filter definition or Transformation template.
   * Update a Processor instance Filter definition or Transformation template for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @param processorRequest  (optional)
   * @return CompletableFuture&lt;ProcessorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ProcessorResponse> processorsAPIUpdateProcessor(String bridgeId, String processorId, ProcessorRequest processorRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIUpdateProcessorRequestBuilder(bridgeId, processorId, processorRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIUpdateProcessor", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a Processor instance Filter definition or Transformation template.
   * Update a Processor instance Filter definition or Transformation template for the authenticated user.
   * @param bridgeId  (required)
   * @param processorId  (required)
   * @param processorRequest  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;ProcessorResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<ProcessorResponse>> processorsAPIUpdateProcessorWithHttpInfo(String bridgeId, String processorId, ProcessorRequest processorRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = processorsAPIUpdateProcessorRequestBuilder(bridgeId, processorId, processorRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("processorsAPIUpdateProcessor", localVarResponse));
            }
            try {
              return CompletableFuture.completedFuture(
                  new ApiResponse<ProcessorResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProcessorResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder processorsAPIUpdateProcessorRequestBuilder(String bridgeId, String processorId, ProcessorRequest processorRequest) throws ApiException {
    // verify the required parameter 'bridgeId' is set
    if (bridgeId == null) {
      throw new ApiException(400, "Missing the required parameter 'bridgeId' when calling processorsAPIUpdateProcessor");
    }
    // verify the required parameter 'processorId' is set
    if (processorId == null) {
      throw new ApiException(400, "Missing the required parameter 'processorId' when calling processorsAPIUpdateProcessor");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/bridges/{bridgeId}/processors/{processorId}"
        .replace("{bridgeId}", ApiClient.urlEncode(bridgeId.toString()))
        .replace("{processorId}", ApiClient.urlEncode(processorId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(processorRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
