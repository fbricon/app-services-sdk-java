/*
 * Red Hat Openshift SmartEvents Fleet Manager
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openshift.cloud.api.smartevents;

import com.openshift.cloud.api.smartevents.invoker.ApiClient;
import com.openshift.cloud.api.smartevents.invoker.ApiException;
import com.openshift.cloud.api.smartevents.invoker.ApiResponse;
import com.openshift.cloud.api.smartevents.invoker.Pair;

import com.openshift.cloud.api.smartevents.models.CloudProviderListResponse;
import com.openshift.cloud.api.smartevents.models.CloudRegionListResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CloudProvidersApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CloudProvidersApi() {
    this(new ApiClient());
  }

  public CloudProvidersApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Cloud Provider.
   * Get details of the Cloud Provider specified by id.
   * @param id  (required)
   * @return CloudProviderListResponse
   * @throws ApiException if fails to make API call
   */
  public CloudProviderListResponse cloudProviderAPIGetCloudProvider(String id) throws ApiException {
    ApiResponse<CloudProviderListResponse> localVarResponse = cloudProviderAPIGetCloudProviderWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get Cloud Provider.
   * Get details of the Cloud Provider specified by id.
   * @param id  (required)
   * @return ApiResponse&lt;CloudProviderListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CloudProviderListResponse> cloudProviderAPIGetCloudProviderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloudProviderAPIGetCloudProviderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cloudProviderAPIGetCloudProvider", localVarResponse);
        }
        return new ApiResponse<CloudProviderListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudProviderListResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloudProviderAPIGetCloudProviderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling cloudProviderAPIGetCloudProvider");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/cloud_providers/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Supported Cloud Regions.
   * Returns the list of supported Regions of the specified Cloud Provider.
   * @param id  (required)
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @return CloudRegionListResponse
   * @throws ApiException if fails to make API call
   */
  public CloudRegionListResponse cloudProviderAPIListCloudProviderRegions(String id, Integer page, Integer size) throws ApiException {
    ApiResponse<CloudRegionListResponse> localVarResponse = cloudProviderAPIListCloudProviderRegionsWithHttpInfo(id, page, size);
    return localVarResponse.getData();
  }

  /**
   * List Supported Cloud Regions.
   * Returns the list of supported Regions of the specified Cloud Provider.
   * @param id  (required)
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @return ApiResponse&lt;CloudRegionListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CloudRegionListResponse> cloudProviderAPIListCloudProviderRegionsWithHttpInfo(String id, Integer page, Integer size) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloudProviderAPIListCloudProviderRegionsRequestBuilder(id, page, size);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cloudProviderAPIListCloudProviderRegions", localVarResponse);
        }
        return new ApiResponse<CloudRegionListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudRegionListResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloudProviderAPIListCloudProviderRegionsRequestBuilder(String id, Integer page, Integer size) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling cloudProviderAPIListCloudProviderRegions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/cloud_providers/{id}/regions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Supported Cloud Providers.
   * Returns the list of supported Cloud Providers.
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @return CloudProviderListResponse
   * @throws ApiException if fails to make API call
   */
  public CloudProviderListResponse cloudProviderAPIListCloudProviders(Integer page, Integer size) throws ApiException {
    ApiResponse<CloudProviderListResponse> localVarResponse = cloudProviderAPIListCloudProvidersWithHttpInfo(page, size);
    return localVarResponse.getData();
  }

  /**
   * List Supported Cloud Providers.
   * Returns the list of supported Cloud Providers.
   * @param page  (optional, default to 0)
   * @param size  (optional, default to 100)
   * @return ApiResponse&lt;CloudProviderListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CloudProviderListResponse> cloudProviderAPIListCloudProvidersWithHttpInfo(Integer page, Integer size) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cloudProviderAPIListCloudProvidersRequestBuilder(page, size);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cloudProviderAPIListCloudProviders", localVarResponse);
        }
        return new ApiResponse<CloudProviderListResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CloudProviderListResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cloudProviderAPIListCloudProvidersRequestBuilder(Integer page, Integer size) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/cloud_providers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
